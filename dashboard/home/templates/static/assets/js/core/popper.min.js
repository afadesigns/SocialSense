const {
  assign,
  floor,
  max,
  min,
  findIndex,
  find,
  filter,
  indexOf,
  keys,
  slice,
  reduce,
  some,
  toString,
  includes,
  call,
  createElement,
  removeAttribute,
  setAttribute,
  requestAnimationFrame,
  cancelAnimationFrame,
  getComputedStyle,
  documentElement,
  clientWidth,
  clientHeight,
  innerWidth,
  innerHeight,
  scrollingElement,
  addEventListener,
  removeEventListener,
  scrollTop,
  scrollLeft,
  getBoundingClientRect,
  contains,
  parentNode,
  assign as objectAssign,
  parseFloat,
  isFinite,
  isNaN,
} = window;

const isIE = () => -1 !== navigator.appVersion.indexOf('MSIE 10');

const isMutationObserverSupported = () =>
  some(
    ['MutationObserver', '[object MutationObserverConstructor]'],
    (t) => -1 < toString.call(window.document.body.style)[t]
  );

const getScrollParent = (node) => {
  let parent = node.parentNode;
  if (!parent) return documentElement;
  const computedStyle = getComputedStyle(parent);
  if ('static' === computedStyle.position) return getScrollParent(parent);
  return parent;
};

const getScroll = (element) =>
  'BODY' === element.nodeName
    ? {
        scrollTop: scrollTop(),
        scrollLeft: scrollLeft(),
      }
    : {
        scrollTop: element.scrollTop,
        scrollLeft: element.scrollLeft,
      };

const getOffsetRect = (element) => {
  const rect = element.getBoundingClientRect();
  const scroll = getScroll(element.ownerDocument.documentElement);
  return {
    left: rect.left + scroll.scrollLeft,
    top: rect.top + scroll.scrollTop,
    width: rect.width,
    height: rect.height,
  };
};

const getOffset = (element, offsetParent = null) => {
  const parent = offsetParent || element.offsetParent;
  if (!parent) return { left: 0, top: 0 };
  const parentRect = getOffsetRect(parent);
  const elementRect = getOffsetRect(element);
  const borderLeft = parseFloat(getComputedStyle(element)['border-left-width']);
  const borderTop = parseFloat(getComputedStyle(element)['border-top-width']);
  const offsetLeft = elementRect.left - parentRect.left - borderLeft;
  const offsetTop = elementRect.top - parentRect.top - borderTop;
  return { left: offsetLeft, top: offsetTop };
};

const getPopperOffsets = (state) => {
  const { reference, element, strategy, placement = 'bottom' } = state;
  const isVertical = ['top', 'bottom'].includes(placement);
  const offset = getOffset(element, reference);
  const popper = getOffsetRect(element);
  const referenceWidth = reference.offsetWidth;
  const referenceHeight = reference.offsetHeight;
  const referenceLeft = reference.offsetLeft;
  const referenceTop = reference.offsetTop;
  const dp = isVertical ? 'y' : 'x';
  const side = isVertical ? 'top' : 'left';
  const opSide = isVertical ? 'left' : 'top';
  const transformProperty = `transform${isIE() ? '3d' : ''}`;
  const arrowStyle = {};
  const arrowElement = document.querySelector('[x-arrow]');

  if (arrowElement) {
    const arrowOffsetParent = reference;
    const arrowOffset = getOffset(arrowElement, arrowOffsetParent);
    const arrowLength =
      isVertical ? arrowOffset.left - referenceLeft : arrowOffset.top - referenceTop;
    const arrowSide =
      isVertical ? 'left' : placement === 'right' ? 'left' : 'top';
    const arrowOffsetSide =
      isVertical ? 'top' : placement === 'bottom' ? 'top' : 'left';

    arrowStyle[arrowOffsetSide] = arrowLength;
    arrowStyle[opSide] = 0;
    arrowStyle[transformProperty] =
      'rotate(' +
      (isVertical ? (placement === 'top' ? 180 : -180) : 90) +
      'deg) translate3d(0, 0, 0)';
  }

  return {
    position: strategy,
    left:
      placement === 'right'
        ? popper.left - offset.left - popper.width + referenceWidth : placement === 'left' ? popper.left - offset.left : popper.left - referenceLeft,
    top:
      placement === 'bottom'
        ? popper.top - offset.top - popper.height + referenceHeight : placement === 'top' ? popper.top - offset.top - arrowLength : popper.top - referenceTop,
    width: isVertical ? popper.width : null,
    height: isVertical ? null : popper.height,
    arrowStyle,
  };
};

const Popper = (options = {}) => {
  const state = {
    ...options,
    gpuAcceleration: 'auto' === options.gpuAcceleration,
    updateBound: null,
    scrollParents: [],
    attributes: {},
    styles: {},
    isDestroyed: !1,
    isCreated: !1,
  };

  const reference = state.reference;
  const popper = state.element;
  const strategy = state.strategy || 'absolute';
  const placement = state.placement || 'bottom';

  const modifiers = [
    {
      name: 'offset',
      enabled: !0,
      fn: (data) => {
        const offset = state.offset || [0, 0];
        data.offsets.popper.top += offset[1];
        data.offsets.popper.left += offset[0];
        return data;

